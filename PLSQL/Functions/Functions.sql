------------------------------------------------------ Funci贸n para calcular el saldo actual de una cuenta de cobro
CREATE OR REPLACE FUNCTION FU_CALC_V_ACTUAL (
    PK_CONJUNTO IN CONJUNTO.COD_CONJUNTO%TYPE,
    PK_BLOQUE IN APARTAMENTO.COD_BLOQUE%TYPE,
    PK_APTO IN APARTAMENTO.COD_APARTAMENTO%TYPE,
    PN_MES IN CUENTA_COBRO.PERIODO_MES_CUENTA%TYPE,
    PN_ANIO IN CUENTA_COBRO.PERIODO_ANIO_CUENTA%TYPE
) RETURN CUENTA_COBRO.SALDO_ACTUAL%TYPE AS
    LS_ACTUAL CUENTA_COBRO.SALDO_ACTUAL%TYPE;
BEGIN
    SELECT
        SALDO_ACTUAL INTO LS_ACTUAL
    FROM
        CUENTA_COBRO
    WHERE
        PERIODO_MES_CUENTA = PN_MES
        AND PERIODO_ANIO_CUENTA = PN_ANIO
        AND COD_CONJUNTO = PK_CONJUNTO
        AND COD_BLOQUE = PK_BLOQUE
        AND COD_APARTAMENTO = PK_APTO;
    RETURN LS_ACTUAL;
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20001, 'FU_CALC_V_ACTUAL Ha ocurrido un error: '
            || SQLCODE
            || SQLERRM);
END FU_CALC_V_ACTUAL;
/

------------------------------------------------------ Funci贸n para calcular el saldo pendiente de una cuenta de cobro
CREATE OR REPLACE FUNCTION FU_CALC_V_PENDIENTE (
    PK_CONJUNTO IN CONJUNTO.COD_CONJUNTO%TYPE,
    PK_BLOQUE IN APARTAMENTO.COD_BLOQUE%TYPE,
    PK_APTO IN APARTAMENTO.COD_APARTAMENTO%TYPE,
    PN_MES IN CUENTA_COBRO.PERIODO_MES_CUENTA%TYPE,
    PN_ANIO IN CUENTA_COBRO.PERIODO_ANIO_CUENTA%TYPE
) RETURN CUENTA_COBRO.SALDO_PENDIENTE%TYPE AS
    LS_PENDIENTE CUENTA_COBRO.SALDO_PENDIENTE%TYPE;
BEGIN
    SELECT
        SALDO_PENDIENTE INTO LS_PENDIENTE
    FROM
        CUENTA_COBRO
    WHERE
        PERIODO_MES_CUENTA = PN_MES
        AND PERIODO_ANIO_CUENTA = PN_ANIO
        AND COD_CONJUNTO = PK_CONJUNTO
        AND COD_BLOQUE = PK_BLOQUE
        AND COD_APARTAMENTO = PK_APTO;
    RETURN LS_PENDIENTE;
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20001, 'FU_CALC_V_PENDIENTE Ha ocurrido un error: '
            || SQLCODE
            || SQLERRM);
END FU_CALC_V_PENDIENTE;
/

------------------------------------------------------ Funci贸n para saber si existe una cuenta de cobro dada
CREATE OR REPLACE FUNCTION FU_EXISTENCIA_CUENTA (
    PK_CONJUNTO IN CONJUNTO.COD_CONJUNTO%TYPE,
    PK_BLOQUE IN APARTAMENTO.COD_BLOQUE%TYPE,
    PK_APTO IN APARTAMENTO.COD_APARTAMENTO%TYPE,
    PN_MES IN CUENTA_COBRO.PERIODO_MES_CUENTA%TYPE,
    PN_ANIO IN CUENTA_COBRO.PERIODO_ANIO_CUENTA%TYPE
) RETURN BOOLEAN AS
    LK_CUENTA CUENTA_COBRO.COD_CUENTA_COBRO%TYPE;
BEGIN
    SELECT
        COD_CUENTA_COBRO INTO LK_CUENTA
    FROM
        CUENTA_COBRO
    WHERE
        COD_CONJUNTO = PK_CONJUNTO
        AND COD_BLOQUE = PK_BLOQUE
        AND COD_APARTAMENTO = PK_APTO
        AND PERIODO_ANIO_CUENTA = PN_MES
        AND PERIODO_ANIO_CUENTA = PN_ANIO;
    IF LK_CUENTA IS NOT NULL THEN
        RETURN TRUE;
    ELSE
        RETURN FALSE;
    END IF;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN FALSE;
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20001, 'FU_EXISTENCIA_CUENTA Ha ocurrido un error: '
            || SQLCODE
            || SQLERRM);
END FU_EXISTENCIA_CUENTA;
/

-- Funci贸n que devuelve un listado de las personas asociadas a su apartamento.

CREATE OR REPLACE FUNCTION FU_MOSTRAR_PERSONAS(
    PK_APTO IN APARTAMENTO.COD_APARTAMENTO%TYPE,
    PK_BLOQUE IN APARTAMENTO.COD_BLOQUE%TYPE,
    PK_CONJUNTO IN CONJUNTO.COD_CONJUNTO%TYPE
) RETURN SYS_REFCURSOR AS
    LR_PERSONA_APTO SYS_REFCURSOR;
BEGIN
    OPEN LR_PERSONA_APTO FOR
        SELECT
            DISTINCT A.COD_APARTAMENTO,
            A.COD_BLOQUE,
            C.NOMBRE_CONJUNTO,
            P.NOMBRE1_PERSONA,
            P.APELLIDO1_PERSONA
        FROM
            APARTAMENTO         A,
            CONJUNTO            C,
            PERSONA             P,
            RESIDE              R,
            PERSONA_RESPONSABLE PR,
            PERSONA_RESIDENTE   PV
        WHERE
            C.COD_CONJUNTO = A.COD_CONJUNTO
            AND A.COD_APARTAMENTO = R.COD_APARTAMENTO
            AND A.COD_BLOQUE = R.COD_BLOQUE
            AND A.COD_CONJUNTO = R.COD_CONJUNTO
            AND PV.COD_PERSONA = R.COD_PERSONA
            AND A.COD_PERSONA = PR.COD_PERSONA;
    RETURN LR_PERSONA_APTO;
END FU_MOSTRAR_PERSONAS;
/