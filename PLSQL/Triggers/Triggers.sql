------------------------------------------------------ Trigger para calcular el costo total de una reserva
CREATE OR REPLACE TRIGGER TR_CALC_TOTAL_RESERVA BEFORE
    INSERT OR UPDATE ON RESERVA FOR EACH ROW
DECLARE
    LV_COSTO ZONA_CONJUNTO.COSTO_ZONA%TYPE;
BEGIN
    SELECT
        COSTO_ZONA INTO LV_COSTO
    FROM
        ZONA_CONJUNTO ZC
    WHERE
        :NEW.COD_CONJUNTO = ZC.COD_CONJUNTO
        AND :NEW.COD_ZONA_CONJUNTO = ZC.COD_ZONA_CONJUNTO;
    :NEW.COSTO_TOTAL_RESERVA := :NEW.NUM_HORAS_RESERVADAS * LV_COSTO;
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20001, 'TR_CALC_TOTAL_RESERVA Ha ocurrido un error: '
            || SQLCODE
            || SQLERRM);
END TR_CALC_TOTAL_RESERVA;
/

------------------------------------------------------ Trigger para actualizar el saldo de una cuenta de cobro dado un pago
CREATE OR REPLACE TRIGGER TR_PAGO_CUENTA BEFORE
    INSERT OR UPDATE ON PAGO FOR EACH ROW
BEGIN
    PR_PAGAR_SALDO(:NEW.COD_CONJUNTO, :NEW.COD_BLOQUE, :NEW.COD_APARTAMENTO, :NEW.VALOR_PAGADO);
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20001, 'TR_PAGO_CUENTA Ha ocurrido un error: '
            || SQLCODE
            || SQLERRM);
END TR_PAGO_CUENTA;
/

------------------------------------------------------ Trigger para calcular el saldo pendiente de una cuenta de cobro
CREATE OR REPLACE TRIGGER TR_SALDO_PENDIENTE BEFORE
    INSERT ON CUENTA_COBRO FOR EACH ROW
DECLARE
    LS_PENDIENTE CUENTA_COBRO.SALDO_PENDIENTE%TYPE := 0;
    PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
    IF :NEW.PERIODO_MES_CUENTA = 1 THEN
        SELECT
            SUM(SALDO_ACTUAL + SALDO_PENDIENTE) INTO LS_PENDIENTE
        FROM
            CUENTA_COBRO
        WHERE
            PERIODO_MES_CUENTA = 12
            AND PERIODO_ANIO_CUENTA = :NEW.PERIODO_ANIO_CUENTA-1;
    ELSE
        SELECT
            SUM(SALDO_ACTUAL + SALDO_PENDIENTE) INTO LS_PENDIENTE
        FROM
            CUENTA_COBRO
        WHERE
            PERIODO_MES_CUENTA = :NEW.PERIODO_MES_CUENTA-1
            AND PERIODO_ANIO_CUENTA = :NEW.PERIODO_ANIO_CUENTA;
    END IF;
    IF LS_PENDIENTE IS NULL THEN
        :NEW.SALDO_PENDIENTE := 0;
    ELSE
        :NEW.SALDO_PENDIENTE := LS_PENDIENTE;
    END IF;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20001, 'TR_SALDO_PENDIENTE Ha ocurrido un error: '
            || SQLCODE
            || SQLERRM);
END TR_SALDO_PENDIENTE;
/

------------------------------------------------------ Trigger para hacer los cálculos correspondientes de la cuenta de cobro cuando hay un saldo a favor.
CREATE OR REPLACE TRIGGER TR_SALDO_ACTUAL_A_FAVOR BEFORE
    UPDATE OF SALDO_ACTUAL ON CUENTA_COBRO FOR EACH ROW
DECLARE
    PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
    IF :OLD.SALDO_PENDIENTE < 0 THEN
        :NEW.SALDO_ACTUAL := :NEW.SALDO_ACTUAL + :OLD.SALDO_PENDIENTE;
        IF :NEW.SALDO_ACTUAL <= 0 THEN
            :NEW.ESTADO_CUENTA := 'Pagado';
        END IF;
        :NEW.SALDO_PENDIENTE := 0;
        PR_INIT_SALDOS(:NEW.COD_CONJUNTO, :NEW.COD_BLOQUE, :NEW.COD_APARTAMENTO, :NEW.PERIODO_MES_CUENTA - 1, :NEW.PERIODO_ANIO_CUENTA);
    END IF;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20001, 'TR_SALDO_ACTUAL Ha ocurrido un error: '
            || SQLCODE
            || SQLERRM);
END TR_SALDO_ACTUAL_A_FAVOR;
/

------------------------------------------------------ Trigger para insertar los saldos por concepto en una cuenta
CREATE OR REPLACE TRIGGER TR_CONCEPTO_CUENTA BEFORE
    INSERT OR UPDATE ON DETALLE_CONCEPTO FOR EACH ROW
DECLARE
    LS_ACTUAL CUENTA_COBRO.SALDO_ACTUAL%TYPE;
BEGIN
    DBMS_OUTPUT.PUT_LINE('TR_CONCEPTO_CUENTA');
    SELECT
        SALDO_ACTUAL INTO LS_ACTUAL
    FROM
        CUENTA_COBRO
    WHERE
        COD_CUENTA_COBRO = :NEW.COD_CUENTA_COBRO;
    UPDATE CUENTA_COBRO
    SET
        SALDO_ACTUAL = LS_ACTUAL + :NEW.PRECIO_CONCEPTO_CUENTA
    WHERE
        COD_CUENTA_COBRO = :NEW.COD_CUENTA_COBRO;
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20001, 'TR_CONCEPTO_CUENTA Ha ocurrido un error: '
            || SQLCODE
            || SQLERRM);
END;
/

------------------------------------------------------ Trigger para insertar el valor de administración del conjunto en el detalle de una cuenta de cobro.
CREATE OR REPLACE TRIGGER TR_CONCEPTO_ADMIN BEFORE
    INSERT OR UPDATE ON DETALLE_CONCEPTO FOR EACH ROW
DECLARE
    LV_ADMIN CONJUNTO.BASE_ADMINISTRACION%TYPE;
    LC_ADMIN APARTAMENTO.COEF_ADMINISTRACION%TYPE;
BEGIN
    IF :NEW.COD_CONCEPTO = 1 THEN
        SELECT
            BASE_ADMINISTRACION,
            COEF_ADMINISTRACION INTO LV_ADMIN,
            LC_ADMIN
        FROM
            CONJUNTO     C,
            APARTAMENTO  A,
            CUENTA_COBRO CC
        WHERE
            CC.COD_APARTAMENTO = A.COD_APARTAMENTO
            AND CC.COD_BLOQUE = A.COD_BLOQUE
            AND CC.COD_CONJUNTO = A.COD_CONJUNTO
            AND A.COD_CONJUNTO = C.COD_CONJUNTO
            AND CC.COD_CUENTA_COBRO = :NEW.COD_CUENTA_COBRO;
        :NEW.PRECIO_CONCEPTO_CUENTA := LV_ADMIN + (LV_ADMIN * (LC_ADMIN / 100));
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20001, 'TR_CONCEPTO_ADMIN Ha ocurrido un error: '
            || SQLCODE
            || SQLERRM);
END;
/